<article class="whiteFrame paddy10 curvedFull">
	<h1>بهینه سازی تحویل css</h1>
	<div class="center">
		<img src="theme/{$settings.theme}/img/optimize-CSS-delivery.jpg" alt="بهینه سازی CSS" title="بهینه سازی CSS" width="328" height="153">
	</div>
	<br>
	<p>
		این قانون زمانی فعال می‌شود كه DSR (Digi Seo Report) تشخیص دهد صفحه حاوی بازگردانی استایلٰ‌شیت‌های خارجی بلوك شده است كه می‌تواند <a href="/post/c_showListObject/481_بهبود-رتبه-جستجو-با-بهینه-سازی-زمان-اولین-بایت--قسمت-اول">زمان اولین بازگردانی</a> را افزایش دهند. 
	</p>
	<b>
		توضیح
	</b>
	<p>
		قبل از اینكه مرورگر بتواند محتوا را بازگردانی كند، باید تمامی اطلاعات استایل و قالب صفحه فعلی را پردازش كند. در نتیجه، مرورگر تا زمانی كه استایل‌شیت‌های خارجی دانلود و پردازش نشده باشند، بازگردانی را بلوك خواهد كرد. این كار می‌تواند به چند مسیر تبادل اطلاعات نیاز داشته و در نتیجه زمان اولین بازگردانی افزایش پیدا كند. 
	</p>
	<b>
		توصیه‌ها 
	</b>
	<p>
		اگر منابع خارجی CSS‌ كوچك هستند، شما می‌توانید مستقیما آنها را در فایل HTML استفاده كنید. این كار اینلاین نام دارد. استفاده از این روش به مرورگر اجازه می‌دهد تا بازگردانی صفحه را بدون اعمال چندین مسیر ادامه دهد. حواستان باشد اگر فایل CSS بزرگ باشد،‌ اینلاین كردن كامل باعث می‌شود DSR در مورد نسبت نیمه بالایی صفحه هشدار بدهد. این هشدار از طریق طبقه بندی محتواها یا محتوای قابل مشاهده را اولویت بندی كنید،‌ هشدار آدرس خواهد شد. در صورتی كه فایل CSS‌ بزرگ باشد،‌ شما باید بخشی از CSS‌ كه اهمیت بیشتری از نظر بازگردانی در نیمه بالایی صفحه را دارد، انتخاب و اینلاین كنید. سایر واحدهای استایل باید پس از بارگذاری محتوای نیمه بالای صفحه،‌ قرار آدرس شوند. 
	</p>
	<ul>
		<li>نمونه‌هایی از اینلاین كردن فایل CSS‌ كوچك</li>
		<li>استایل‌شیت‌های بزرگ را اینلاین نکنید</li>
		<li>خصوصیات CSS‌ را اینلاین نكنید.</li>
	</ul>
	<p>
		نمونه‌هایی از اینلاین كردن فایل CSS‌ كوچك
		اگر سند HTML چنین شكلی داشته باشد:
	</p>
	{literal}
	<pre>
		<html>
			<head>
		    	<link rel="stylesheet" href="small.css">
		  	</head>
		  	<body>
		    	<div class="blue">
		      		Hello, world!
		    	</div>
		  	</body>
		</html>
	</pre>
	{/literal}
	<p>
		و منبع Small.css چنین شكلی داشته باشد:
	</p>
	{literal}
	<pre>
		.yellow {background-color: yellow;}
		.blue {color: blue;}
		.big { font-size: 8em; }
		.bold { font-weight: bold; }
	</pre>
	{/literal}
	<p>
		پس شما می‌توانید CSS‌ حیاتی را به شكل زیر اینلاین كنید:
	</p>
	{literal}
	<pre>
		<html>
  			<head>
    			<style>
      				.blue{color:blue;}
    			</style>
    		</head>
  			<body>
    			<div class="blue">
	      			Hello, world!
    			</div>
			    <script>
			      var cb = function() {
			        var l = document.createElement('link'); l.rel = 'stylesheet';
			        l.href = 'small.css';
			        var h = document.getElementsByTagName('head')[0]; h.parentNode.insertBefore(l, h);
			      };
			      var raf = requestAnimationFrame || mozRequestAnimationFrame ||
			          webkitRequestAnimationFrame || msRequestAnimationFrame;
			      if (raf) raf(cb);
			      else window.addEventListener('load', cb);
			    </script>
 			</body>
		</html>
	</pre>
	{/literal}
	<p>
		استایل‌های حیاتی باید در محتوای نیمه بالای صفحه اینلاین و فورا در سند اعمال شوند. Small.css كامل پس از مشخص شدن شكل اولیه صفحه بارگذاری خواهد شد. استایل‌ها پس از تكمیل بارگذاری و در صورت عدم بلوك شدن بازگردانی اولیه محتوای حیاتی اعمال خواهند شد.
	</p>
	<p>
		توجه داشته باشید كه پلتفورم وب به زودی توانایی بارگذاری استایل‌شیت‌هابدون بلوك كردن بازگردانی را پیدا خواهد كرد. در این صورت نیازی به استفاده از جاوا اسكریپت یا روش وارد كردن HTML‌ نخواهد بود. 
	</p>
	<p>
		در زمان اینلاین كردن آدرس URL در فایل CSS دقت كنید. اگر چه انتخاب آدرس URL های كوچك در CSS منطقی خواهد بود،‌ اما اینلاین كردن آدرس URL های بزرگ می‌تواند باعث بزرگتر شدن اندازه CSS‌ نیمه بالای صفحه و در نتیجه به كاهش سرعت بازگردانی صفحه منجر شود.
	</p>
	<p>
		در صورت امكان از اینلاین كردن خصوصیات CSS‌ در عناصر HTML (مانند <p style=...>) خودداری كنید زیرا باعث تكرار غیر ضروری كدها می‌شود. به علاوه،‌ اینلاین كردن CSS‌ در عناصر HTML‌ در تنظیمات پایه بر اساس سیاست امنیت محتوا (CSP1) منع شده است.
	</p>
</article>